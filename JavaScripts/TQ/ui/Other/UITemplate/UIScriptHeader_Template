
/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: ${Author}
 * UI: ${UIPath}
 * TIME: ${Time}
 */

 ${Import}

 @UI.UICallOnly('${UIPath}')
 export default class ${ClassName}_Generate extends ${SuperClassName} {
	 ${Fileds}
 
	protected onAwake() {
		//设置能否每帧触发onUpdate
		this.canUpdate = false;
		this.layer = Extension.UILayerBottom;
		this.initButtons();
	}
	protected initButtons() {
		//按钮添加点击
		${StaleButton_Start}
		this.${StaleButton}.onClicked.add(()=>{
			Events.dispatchLocal("PlayButtonClick", "${StaleButton}");
		})
		this.initLanguage(this.${StaleButton});
		this.${StaleButton}.touchMethod = (UI.ButtonTouchMethod.PreciseTap);
		${StaleButton_End}
		//按钮添加点击
		${Button_Start}
		this.${Button}.onClicked.add(()=>{
			Events.dispatchLocal("PlayButtonClick", "${Button}");
		})
		this.${Button}.touchMethod = (UI.ButtonTouchMethod.PreciseTap);
		${Button_End}

		//按钮多语言
		${StaleButton_HideStart}
		this.initLanguage(this.uiWidgetBase.findChildByPath("${StaleButton_Path}") as any);
		${StaleButton_HideEnd}
		//文本多语言
		${TextBlock_Start}
		this.initLanguage(this.${TextBlock})
		${TextBlock_End}
		//文本多语言
		${TextBlock_HideStart}
		this.initLanguage(this.uiWidgetBase.findChildByPath("${TextBlock_Path}") as any);
		${TextBlock_HideEnd}

	}
	private initLanguage(ui: UI.StaleButton | UI.TextBlock) {
        let call = UI.UIBehaviour.getBehaviour("lan");
        if (call && ui) {
            call(ui);
        }
    }

	/**查找根节点下的UI物体 */
    protected findChildByPath<T extends UI.Widget>(EleClass: { new(): T }, inPath: string): T {
        const find = this.rootcanvas.findChildByPath(inPath);
        if (!find) { return null; }
        return find as T;
    }

	/**隐藏自身 */
	protected hide(){
		Extension.UIManager.instance.hideUI(this);
	}

	/**查找嵌套的预制体UI的子物体 */
    protected findPrefabBtn<T extends UI.Widget>(prefab:UI.UserWidget,inPath:string,uiClass:{new ():T}):T{
        let find = prefab.rootContent.findChildByPath(inPath);
        let ret = find ? (find as T):null;
        return ret;
    }

	/**是否正在显示 */
	public get isShow():boolean{
        return Extension.UIManager.instance.isShow(this);
    }
 }
 